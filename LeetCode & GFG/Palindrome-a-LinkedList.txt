/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverse(ListNode* head)
    {
        ListNode *next = NULL;
        ListNode *cur = head;
        ListNode *pre = NULL;

        while(cur != NULL)
        {
            next = cur->next;
            cur->next = pre;
            pre = cur;
            cur = next;
        }
        return pre;
    }
    bool isPalindrome(ListNode* head) 
    {
        ListNode *slow = head;
        ListNode *fast = head;

        while(fast->next != NULL && fast->next->next != NULL)
        {
            slow = slow->next;
            fast = fast->next->next;
        }
       
        slow->next = reverse(slow->next);
        slow = slow->next;  //2nd half at starting

        ListNode* ptr = head;
        while(slow != NULL)
        {
            if(slow->val != ptr->val)
            {
                return false;
            }
            slow = slow->next;
            ptr  = ptr->next;
        }

        return true;



        
        
    }
};