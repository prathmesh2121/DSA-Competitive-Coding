#include<stdio.h>
#define n 5
int front = -1;
int rear  = -1;
int deque[n];

void insert_front()
{

    if(((front == 0) && (rear == n-1)) || (front == rear + 1))
    {
        printf("\nOverflow !");
    }
    else
    {   
        int x;
        printf("\nEnter the value = ");
        scanf("%d", &x);
        if( front == -1 && rear == -1)
        {
            front = 0;
            rear  = 0;
            deque[front] = x;
        }
        else if( front == 0 )
        {
            front        = n-1;
            deque[front] = x;
            printf("\nInintially Front found at ZERO , then Element %d inserted at front. now Front = %d.",x,front);
        }
        else
        {
            front--;
            deque[front] = x;
            printf("\nElement %d inserted at front - index %d.",x,front);
        }
    }
}
void insert_rear()
{

    
    if(((front == 0) && (rear == n-1)) || (front = rear + 1))
    {
        printf("\nOverflow !");
    }
    else 
    {
        int x;
        printf("\nEnter the value = ");
        scanf("%d", &x);
        if( front == -1 && rear == -1)
        {
            front = 0;
            rear  = 0;
            deque[rear] = x;
        }
        else if( rear == n-1 )          //if rear at last index 
        {
            rear        = 0;            // then put it on first indec 
            deque[rear] = x;    
            printf("\nInintially REAR found at last index , then Element %d inserted at rear. now Rear = %d.",x,rear);
        }
        else
        {
            rear++;                     //if rear is not at last index. then simply increament rear by 1.
            deque[rear] = x;
            printf("\nElement %d inserted at Rear. Now Rear = %d.",x,rear);
        }
    }
}
void delete_front()
{
    if((front == 0) && (rear == 0))
    {
        printf("\nUnderflow !");
    }
    else if(front == rear)
    {
        printf("\nInintially Front at = %d & Deleted Element = %d, Now both set to -1",front,deque[front]);
        front = -1;
        rear  = -1;
    }
    else if (front == n-1)
    {
        printf("\nInintially Front at = %d, & Deleted Element = %d, Now Front = 0",front, deque[front]);
        front = 0;
    }
    else
    {
        printf("\nDeleted Element = %d", deque[front]);
        front++;
        printf(" Now Front = %d", front);
    }
}
void delete_rear()
{
    if((front == -1) && (rear == -1))
    {
        printf("\nUnderflow !");
    }
    else if(front == rear)
    {
        printf("\nInintially Rear at = %d & Deleted Element = %d, Now both set to -1",rear,deque[rear]);
        front = -1;
        rear  = -1;
    }
    else if(rear == 0)
    {
        printf("\nInintially Rear at = %d, & Deleted Element = %d, Now Rear = %d",rear, deque[rear],n-1);
        rear = n-1;
    }
    else
    {
        printf("\nDeleted Element = %d", deque[rear]);
        rear--;
    }
}
void display()
{
    if((front == -1) && (rear == -1))
    {
        printf("\nDequeue is empty !");
    }
    else
    {
        printf("\nDeque = ");
        int i = front;
        while( i != rear )
        {
            printf(" %d ", deque[i]);
            i = ( i + 1 ) % n;
        }
    }
    printf(" %d ",deque[rear]);
}
void main()
{
  /* insert_front(5);
   insert_rear(3);
   insert_front(1);
   insert_front(2);
   insert_front(2);
   insert_front(8);
   insert_rear(7);
   insert_rear(9);
   
   delete_front();
   delete_rear();
   delete_front();
   delete_rear();
   delete_front();
   delete_rear(); */
   
   int ch = 0;
   
   printf("\n\n*****DEQUE USING CIRCULAR QUEUE*****");
   
   while(ch != 6)
   {
        printf("\n1]Insert at Front \n2]Insert at Rear \n3]Delete at Front \n4]Delete at Rear \n5]Display \n6]Exit");
        printf("\nEnter your choice = ");
        scanf("%d", &ch); 
        
        
        switch(ch)
        {
            case 1: insert_front();
                    break;
            case 2: insert_rear();
                    break;
            case 3: delete_front();
                    break;
            case 4: delete_rear();
                    break;
            case 5: display();
                    break;
            case 6: printf("\nPress any key to exit ...");
                    break;
            default: printf("\nEnter valid");
        }
   }
   
   
   
    
}