#include <bits/stdc++.h> 
int help(vector<int> &weight, vector<int> &value, int index, int cap, vector<vector<int>> &dp)
{
	if(dp[index][cap] != -1)
	{
		return dp[index][cap];
	}
	if(index == 0)
	{
		if(weight[0] <= cap)
		{
			return value[0];
		}
		else
		{
			return 0;
		}
	}

	int x = 0;
	if(weight[index] <= cap)
	{
		x = value[index] + help(weight, value, index-1, cap-weight[index], dp);
	}
	int y = help(weight, value, index-1, cap, dp);
	
	dp[index][cap] = max(x,y);
	return dp[index][cap];
}
int knapsack(vector<int> weight, vector<int> value, int n, int cap) 
{
        vector<vector<int>> dp(n,vector<int>(cap+1, -1));
		return help(weight, value, n-1,cap, dp);
}