// GFG Hard

//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;


// } Driver Code Ends
class Solution{
    public:
    // arr: input array
    // num: size of array
    //Function to find maximum circular subarray sum.
    int maxNormalSum(int n, int arr[])           // kedanes thereom
    {
        int result = arr[0];
        int maxEnding = arr[0];
        for(int i=1; i<n; i++)
        {
            maxEnding = max(arr[i], maxEnding+arr[i]);
            result = max(maxEnding, result);
        }
        return result;
    }
    int circularSubarraySum(int arr[], int n)
    {
        int maxNormal = maxNormalSum(n, arr);
        if(maxNormal < 0)           // if negative
        {
            return maxNormal;
        }
        
        int arrsum=0;
        for(int i=0; i<n; i++)
        {
            arrsum += arr[i];       
            arr[i] = -arr[i];          //inverse
        }
        int max_circular = arrsum + maxNormalSum(n, arr);
        return max(max_circular, maxNormal);
        
     
     
     
    }
};

//{ Driver Code Starts.

int main()
 {
	int T;
	
	//testcases
	cin>> T;
	
	while (T--)
	{
	    int num;
	    
	    //size of array
	    cin>>num;
	    int arr[num];
	    
	    //inserting elements
	    for(int i = 0; i<num; i++)
	        cin>>arr[i];
	        
	    Solution ob;
	    //calling function
	    cout << ob.circularSubarraySum(arr, num) << endl;
	    
	}
	
	return 0;
}
// } Driver Code Ends